
####### What happens when you initialize a repository? Why do you need to do it?

you only initialize the repo without any updated and commit
one new path is created but is hidden [.git] 


logs:

cleber@ninja-asus ~/Desktop/Udacity/Github/Version-Control/reflections $ git init 
Reinitialized existing Git repository in /home/cleber/Desktop/Udacity/Github/Version-Control/reflections/.git/
cleber@ninja-asus ~/Desktop/Udacity/Github/Version-Control/reflections $ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	lesson_1_reflections.txt
	lesson_2_reflections.txt




####### How is the staging area different from the working directory and the repository?
What value do you think it offers?

staging area its a kind of waiting hall... 
then we can add files there to commit later 

	

	

####### How can you use the staging area to make sure you have one commit per logical
change?



you can check in git status, I can use git diff --steged and see if I commit the changes or not, remembering always use git status to check if the files are in staging area or not. 





#######What are some situations when branches would be helpful in keeping your history organized? How would branches help?

branches could be helpful with a lot of things, new version , new idioms, new functions. 
and then you can put some levels in your app or project 


########How do the diagrams help you visualize the branch structure?

it´s awesome, we can built like a tree and put eveything together after test and fixes the bugs, really useful function of git. 




#########What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

it´s a great way to combine codes and dont lose any improvements in your code


What are the pros and cons of Git's automatic merging vs. always doing merges
manually?